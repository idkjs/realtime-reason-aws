// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Wonka = require("wonka/src/wonka.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");
var Api = require("@aws-amplify/api");

function configure(config) {
  Api.default.configure(config);
  return /* () */0;
}

function mutate(graphqlOperation) {
  return Api.default.graphql(graphqlOperation);
}

var objectWithCallback_closed = true;

var objectWithCallback_next = (function ($$event) {
    console.log("event", $$event);
    return /* () */0;
  });

var objectWithCallback_error = (function (errorValue) {
    console.log(errorValue);
    return /* () */0;
  });

var objectWithCallback_complete = (function (param) {
    console.log("complete");
    return /* () */0;
  });

var objectWithCallback = {
  closed: objectWithCallback_closed,
  next: objectWithCallback_next,
  error: objectWithCallback_error,
  complete: objectWithCallback_complete
};

function graphqlSubCb(graphqlOperation) {
  return Api.default.graphql(graphqlOperation);
}

function graphqlSubUrql(graphqlOperation) {
  return Api.default.graphql(graphqlOperation);
}

function subWithWonka(graphqlOperation) {
  return Api.default.graphql(graphqlOperation);
}

function clientResponseToReason(parse, result) {
  var data = Belt_Option.map(Caml_option.nullable_to_opt(result.data), parse);
  var error = result.error;
  var response = data !== undefined ? /* Data */Block.__(0, [Caml_option.valFromOption(data)]) : (
      (error == null) ? /* NotFound */0 : /* Error */Block.__(1, [error])
    );
  return {
          data: data,
          error: (error == null) ? undefined : Caml_option.some(error),
          response: response
        };
}

function executeQuery(request, param) {
  var req_query = request.query;
  var req_variables = Caml_option.some(request.variables);
  var req = {
    query: req_query,
    variables: req_variables
  };
  var parse = request.parse;
  return Wonka.map((function (result) {
                  return clientResponseToReason(parse, result);
                }))(Api.default.graphql(req));
}

function executeSubscription(request) {
  var req_query = request.query;
  var req_variables = Caml_option.some(request.variables);
  var req = {
    query: req_query,
    variables: req_variables
  };
  var parse = request.parse;
  return Wonka.map((function (result) {
                  return clientResponseToReason(parse, result);
                }))(Api.default.graphql(req));
}

exports.configure = configure;
exports.mutate = mutate;
exports.objectWithCallback = objectWithCallback;
exports.graphqlSubCb = graphqlSubCb;
exports.graphqlSubUrql = graphqlSubUrql;
exports.subWithWonka = subWithWonka;
exports.clientResponseToReason = clientResponseToReason;
exports.executeQuery = executeQuery;
exports.executeSubscription = executeSubscription;
/* Wonka Not a pure module */
